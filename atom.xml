<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-28T03:25:36.360Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018年8月读书记录</title>
    <link href="http://yoursite.com/2018/09/01/2018%E5%B9%B48%E6%9C%88%E8%AF%BB%E4%B9%A6%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2018/09/01/2018年8月读书记录/</id>
    <published>2018-09-01T02:04:55.000Z</published>
    <updated>2018-08-28T03:25:36.360Z</updated>
    
    <content type="html"><![CDATA[<p>1.《不存在的骑士》《分成两半的子爵》《树上的男爵》 伊塔洛·卡尔维诺<br><a id="more"></a><br><img src="/img/8-1.jpg" width="35%" height="35%"><br><img src="/img/8-2.jpg" width="35%" height="35%"><br><img src="/img/8-3.jpg" width="35%" height="35%"></p><p>现代人是分裂的、残缺的、不完整的、自我敌对；马克思称之为“异化”，弗洛伊德称之为“压抑”，古老的和谐状态消失了，人们渴望新的完整。</p><p>2.《浮生六记》 沈复（推荐）<br><img src="/img/8-4.jpg" width="35%" height="35%"></p><p>芸娘多好的老婆啊，给沈复生儿女，找妻妾，被冤枉而不辩解，勤劳好学。怪只怪沈复太穷了，家族关系糟糕，没有理财意识，只知穷游玩乐，写诗作画，不思进取。</p><p>3.《半小时漫画世界史》 陈磊</p><p><img src="/img/8-5.jpg" width="35%" height="35%"></p><p>畅销书，不过四十块钱有点贵…</p><p>4.《人间失格》 太宰治（推荐）</p><p><img src="/img/8-6.jpg" width="35%" height="35%"></p><p>消沉，黑暗，颓废美。可以看一下《被嫌弃的松子的一生》，生而为人，我很抱歉。</p><p>5.《理性乐观派》 马特·里德利（强烈推荐）</p><p><img src="/img/8-7.jpg" width="35%" height="35%"></p><p>一部人类经济进步史，反击主流的悲观论调，好书！。</p><p>6.《求医不如求己》 中里巴人</p><p><img src="/img/8-8.jpg" width="35%" height="35%"></p><p>有点江湖骗子的感觉，取其精华，去其糟怕吧。</p><p>7.《人体使用手册》 吴清忠</p><p><img src="/img/8-9.jpg" width="35%" height="35%"></p><p>同样取其精华，去其糟怕。保健的基本五项：1、早睡早起；2、敲胆经；3、按摩心包经；4、不生气；5、保持肠胃清洁。</p><p>8.《为什么中国人勤劳而不富有》 陈志武（推荐）</p><p><img src="/img/8-10.jpg" width="35%" height="35%"></p><p>因为人的创造能力和生产能力在过高的交易成本中耗散掉了。好书。</p><p>9.《乌合之众》 勒庞</p><p><img src="/img/8-11.jpg" width="35%" height="35%"></p><p>10.《棋王》 阿城</p><p><img src="/img/8-12.jpg" width="35%" height="35%"></p><p>11.《异乡人》 加缪</p><p><img src="/img/8-13.jpg" width="35%" height="35%"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.《不存在的骑士》《分成两半的子爵》《树上的男爵》 伊塔洛·卡尔维诺&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python抢京东神券</title>
    <link href="http://yoursite.com/2018/08/28/python%E6%8A%A2%E4%BA%AC%E4%B8%9C%E7%A5%9E%E5%88%B8/"/>
    <id>http://yoursite.com/2018/08/28/python抢京东神券/</id>
    <published>2018-08-28T09:42:26.000Z</published>
    <updated>2018-08-29T02:25:14.334Z</updated>
    
    <content type="html"><![CDATA[<p>某东天天做活动，今天纸品清洁超级品类日，14点抢一个199-198瞬间没了。我就想是不是可以用脚本来抢，于是记录下过程。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><ul><li>python</li><li>chrome浏览器</li><li>chromedriver</li><li>selenium</li></ul></blockquote><p>python + pip 环境安装请参考：<br><a href="http://www.cnblogs.com/duoyi/articles/7904634.html" target="_blank" rel="noopener">http://www.cnblogs.com/duoyi/articles/7904634.html</a></p><h2 id="安装selenium"><a href="#安装selenium" class="headerlink" title="安装selenium"></a>安装selenium</h2><p>selenium是一个功能自动化工具，官网：<a href="https://www.seleniumhq.org（需要梯子）" target="_blank" rel="noopener">https://www.seleniumhq.org（需要梯子）</a><br>我们可以用pip来安装selenium<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install selenium</span><br></pre></td></tr></table></figure></p><h2 id="下载chromedriver"><a href="#下载chromedriver" class="headerlink" title="下载chromedriver"></a>下载chromedriver</h2><p>使用webDriver再chrome上测试时，需要下载chrome驱动，从<a href="http://chromedriver.storage.googleapis.com/index.html下载" target="_blank" rel="noopener">http://chromedriver.storage.googleapis.com/index.html下载</a><br>下载完成后注意要把chromedriver放到python文件夹（如 C:\Users\Administrator\AppData\Local\Programs\Python\Python36）和chrome文件夹（如 C:\Program Files\Google\Chrome\Application）下面</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JDQUAN</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,url)</span>:</span></span><br><span class="line">        self.driver=webdriver.Chrome()</span><br><span class="line">        self.driver.get(url)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login_jd</span><span class="params">(self,num,pwd)</span>:</span></span><br><span class="line">        self.driver.find_element_by_link_text(<span class="string">'账户登录'</span>).click()</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">'loginname'</span>).send_keys(num)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">'nloginpwd'</span>).send_keys(pwd)</span><br><span class="line">        self.driver.find_element_by_id(<span class="string">'loginsubmit'</span>).click()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">buy_on_time</span><span class="params">(self,buytime,quan_link)</span>:</span></span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            now = datetime.datetime.now().strftime(<span class="string">'%Y-%m-%d %H:%M:%S'</span>)</span><br><span class="line">            <span class="keyword">if</span> now == buytime:</span><br><span class="line">              <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">                self.driver.get(quan_link)</span><br><span class="line">                time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(self,buytime,quan_link)</span>:</span></span><br><span class="line">        num=<span class="string">'num'</span></span><br><span class="line">        pwd=<span class="string">'pwd'</span></span><br><span class="line">        self.login_jd(num,pwd)</span><br><span class="line">        self.buy_on_time(buytime,quan_link)</span><br><span class="line">jd=JDQUAN(<span class="string">'https://passport.jd.com/new/login.aspx'</span>)</span><br><span class="line">jd.start(<span class="string">'2018-08-28 20:00:00'</span>,<span class="string">'https://coupon.jd.com/ilink/couponSendFront/send_index.action?key=a53659ef12e44caaa8fca46ff86a0bbe&amp;roleId=13710707&amp;to=sale.jd.com/act/s6qSug4WUfYZKkzl.html&amp;cpdad=1DLSUE'</span>)</span><br></pre></td></tr></table></figure><p>num和pwd为账号和比吗，实例化JDQUAN穿入的url是登录页，start函数的两个参数是开始的时间和优惠券的地址。<br>优惠券的地址可以按f12再浏览器里找到。<br><img src="/img/coupon.png"><br>如果登录的时候遇到需要输入验证码的情况，可以手动输入，再手动点击登录。只要在抢券时间前登录就可以。<br>最后直接运行就可以了，运气好的话就能抢到了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ python main.py</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某东天天做活动，今天纸品清洁超级品类日，14点抢一个199-198瞬间没了。我就想是不是可以用脚本来抢，于是记录下过程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2018年7月读书记录</title>
    <link href="http://yoursite.com/2018/08/02/2018%E5%B9%B47%E6%9C%88%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2018/08/02/2018年7月读书笔记/</id>
    <published>2018-08-02T09:12:08.000Z</published>
    <updated>2018-08-28T03:02:09.231Z</updated>
    
    <content type="html"><![CDATA[<p>1.《微习惯》 斯蒂芬·盖斯<br><a id="more"></a><br><img src="/img/7.jpg" width="35%" height="35%"></p><p>微习惯是一种非常微小的积极行为，你需要每天强迫自己完成它。微习惯太小，小到不可能失败（重点）。从最简单的任务开始进而培养起好的习惯。</p><p>2.《万寿寺》 王小波</p><p><img src="/img/7-2.jpg" width="35%" height="35%"></p><p>讲了一个失忆者渐渐找回记忆的故事，有点太意识流…</p><p>3.《情人》 玛格丽特·杜拉斯</p><p><img src="/img/7-3.jpg" width="35%" height="35%"></p><p>我已经老了，有一天，在一处公共场所的大厅里，有一个男人向我走来。他主动介绍自己，他对我说：“我认识你，永远记得你。那时候，你还很年轻，人人都说你美，现在，我是特为来告诉你，对我来说，我觉得现在你比年轻的时候更美，那时你是年轻女人，与你那时的面貌相比，我更爱你现在备受摧残的面容。”</p><p>4.《论人类不平等的起源和基础》 卢梭（推荐）</p><p><img src="/img/7-4.jpg" width="35%" height="35%"></p><p>不平等在自然状态下几乎不存在，其发展与壮大产生于人类天赋的发展与精神的进步过程中，最后随着私有制与法律的形成而稳定下来，变得合法。好书。</p><p>5.《一个叫欧维的男人决定去死》 弗雷德里克·巴克曼 </p><p><img src="/img/7-5.jpg" width="35%" height="35%"></p><p>欧维被时代所困，孤僻，脾气火爆，内心却存留了一份柔软。</p><p>6.《红拂夜奔》 王小波</p><p><img src="/img/7-6.jpg" width="35%" height="35%"></p><p>到目前为止，没有一件事能让我相信我是对的，就是人生来有趣，过去有趣，渴望有趣，内心有趣却假装无趣。也没有一件事能证明我是错的，让我相信人生来无趣，过去无趣现在也无趣，不喜欢有趣的事而且表里如一。所以到目前为止，我只能强忍着绝望活在世界上。</p><p>7.《世界上的另一个你》 朗·霍尔 / 丹佛·摩尔</p><p><img src="/img/7-7.jpg" width="35%" height="35%"></p><p>公司书架上找的书，挺温暖的故事。</p><p>8.《今日简史》  尤瓦尔·赫拉利 （推荐）</p><p><img src="/img/7-8.jpg" width="35%" height="35%"></p><p>消灭一个旧的议题，产生一个新的议题，这就是我们每一代人推动历史进步的方式。</p><p>9.《牧羊少年奇幻之旅》 保罗·柯艾略</p><p><img src="/img/7-9.jpg" width="35%" height="35%"></p><p>心灵老鸭汤，感觉是把名句警句先写好，再插到故事之中…</p><p>10.《未来千年文学备忘录》 伊塔洛·卡尔维诺 （强烈推荐）</p><p><img src="/img/7-10.jpg" width="35%" height="35%"></p><p>轻逸、确切、易见、准、繁复，这是卡尔维诺给出的普遍的文学标准。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.《微习惯》 斯蒂芬·盖斯&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>微信小程序开发</title>
    <link href="http://yoursite.com/2018/08/01/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2018/08/01/微信小程序开发/</id>
    <published>2018-08-01T03:24:23.000Z</published>
    <updated>2018-08-29T07:06:30.552Z</updated>
    
    <content type="html"><![CDATA[<p>小程序经过两年的发展，已经越来越成熟。市面上也已经出现了小程序开发工程师的岗位。最近学习了一下，准备做一个菜谱小程序，记录之。</p><a id="more"></a><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><blockquote><ul><li><a href="https://developers.weixin.qq.com/miniprogram/dev/index.html" target="_blank" rel="noopener">官方教程</a></li><li><a href="https://developers.weixin.qq.com/community/" target="_blank" rel="noopener">微信开放社区</a></li><li><a href="https://www.juhe.cn/" target="_blank" rel="noopener">聚合数据</a>(作为后台接口)</li></ul></blockquote><h2 id="申请账号、安装开发工具"><a href="#申请账号、安装开发工具" class="headerlink" title="申请账号、安装开发工具"></a>申请账号、安装开发工具</h2><p>首先我们按照<a href="https://developers.weixin.qq.com/miniprogram/dev/index.html" target="_blank" rel="noopener">官方教程</a>申请账号和安装开发工具，教程里写的非常详细。<br>按照教程输入appid，并打开项目。<br><img src="/img/wechatide.png"><br>我们可以看到微信开发者工具整合了代码编辑器，浏览器调试，效果预览，代码管理等等，非常的方便。</p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><p><img src="/img/index.png"><br>一个页面（模块）分为四部分，wxml文件就是页面模板，json文件是当前页面的一些配置信息，wxss是样式文件，还有一个js文件。<br>我使用<a href="https://www.juhe.cn/" target="_blank" rel="noopener">聚合数据</a>提供的<a href="https://www.juhe.cn/docs/api/id/46" target="_blank" rel="noopener">菜谱接口</a>作为后台接口。<br>我把小程序分为五个页面（主页、搜索页、列表页、详情页、分类页），具体编写过程不再赘述。<br>完整代码：<a href="https://github.com/PecoKael/menu" target="_blank" rel="noopener">https://github.com/PecoKael/menu</a></p><h2 id="上线"><a href="#上线" class="headerlink" title="上线"></a>上线</h2><p>小程序上线需要审核，登录 小程序管理后台 - 开发管理 - 开发版本 找到提交上传的版本。在开发版本的列表中，点击 提交审核 按照页面提示，填写相关的信息，即可以将小程序提交审核。<br>我是周五下午提交审核的，用了一个小时就审核通过了，可以说非常快了。小程序上线以后还可以看运营数据，非常好。<br><img src="/img/wechatcount.png"><br><img src="/img/wechatcount2.png"><br><img src="/img/wechatcount3.png"><br><img src="/img/wechatcount4.png"><br><img src="/img/wechatcount5.png"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>优点<br>1.小程序不需要安装，用完即走，用户体验更像是一个app。<br>2.开发体验非常好，文档完善，IDE非常好用，有一整套的良好生态。继承了开发管理，代码管理，上线后有数据分析。<br>3.审核非常快，开发成本非常低，两天就开发好上线了。<br>一些不足<br>1.每次编写代码保存的时候，页面都会自动更新并且返回首页。<br>2.登录管理后台每次都要微信扫码，每次做重要动作也需要微信扫码。<br>3.后台接口仅支持https，开发的时候有些不便。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;小程序经过两年的发展，已经越来越成熟。市面上也已经出现了小程序开发工程师的岗位。最近学习了一下，准备做一个菜谱小程序，记录之。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>论人类不平等的起源读后感</title>
    <link href="http://yoursite.com/2018/07/17/%E8%AE%BA%E4%BA%BA%E7%B1%BB%E4%B8%8D%E5%B9%B3%E7%AD%89%E7%9A%84%E8%B5%B7%E6%BA%90%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>http://yoursite.com/2018/07/17/论人类不平等的起源读后感/</id>
    <published>2018-07-17T03:25:24.000Z</published>
    <updated>2018-07-17T03:27:48.061Z</updated>
    
    <content type="html"><![CDATA[<p>这篇论文是卢梭写给第戎科学院的，就如书名，是讨论人类不平等的起源和基础。这篇在人类思想史上有地位的文章表达了这样一种观点：人类的不平等是人类自身在社会化进程中造成的，最后随着私有制与法律的形成而稳定下来。<a id="more"></a><br>作者首先论述了人类中存在的不平等：即生理不平等和精神或者是政治的不平等。生理不平等是由自然造成的，如年龄、身体、体力、心智等。而自由不平等则是依靠一种公约，在人类共识的基础上被建立起来，或者至少为人类所认可的，主要体现为少数人通过损害他人利益而享有的各种特权，例如更加富有、更加尊贵、更加强大，或者甚至让他人臣服。我们不必追问“自然的不平等”的源头，因为“自然的不平等”一次本身就是答案了。而政治的不平等，是由于人类在社会进化中造成的。卢梭认为不平等在自然状态下几乎不存在，原始状态的人没有不平等，这一状态的野蛮人唯一关心的是“自我保存”。野蛮人没有收到任何理性光芒的照耀，因此他只能体会到各种自然冲动产生的情欲，他能够认知的唯一的“好”就是粮食、雌性和休息，而他唯一惧怕的“坏”就是饥饿与疼痛。然而当农业出现的时候，必然会产生对土地的分配，而私有一旦得到承认，便会产生最初的平等原则。一旦人类开始着眼于未来，并且每个人都能够预见自己对某些财产损失的时候，没有一个人不会害怕有自己可能对人造成的损失所带来的报复。由于自然的不平等，有些人可以挣得很多，而有些人难以维持生计，自然的不平等随着关系的不平等而逐渐显现出来。由此产生富人穷人，产生统治和奴役。私有财产后的第一个恶果，贪婪的野心，为使自己高人一等而积累财富的强烈欲望，使有人产生了可怕的倾向和嫉妒之心，通过损害他人而扩大自己的财产，暴力、掠夺、统治、奴役。同时富人清楚的意识到这样的行为是建立在不牢靠、滥用权力的基础之上。于是富人们想出了一个方案：灌输制度，改变自然法对富人不利的准测，最终使其偏向对富人有利的一面，这便是是法律的起源。弱者有了新的制度，富人拥有了新的权力，自然的自由一去不复返。卢梭认为法律和私有财产权的形成是不平等形成的第一阶段，法官的设立是第二阶段，最后一个阶段是合法权利向专制权力的转变。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇论文是卢梭写给第戎科学院的，就如书名，是讨论人类不平等的起源和基础。这篇在人类思想史上有地位的文章表达了这样一种观点：人类的不平等是人类自身在社会化进程中造成的，最后随着私有制与法律的形成而稳定下来。
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>promise</title>
    <link href="http://yoursite.com/2018/06/27/promise/"/>
    <id>http://yoursite.com/2018/06/27/promise/</id>
    <published>2018-06-27T08:28:26.000Z</published>
    <updated>2018-06-27T08:35:05.104Z</updated>
    
    <content type="html"><![CDATA[<p>Promise是异步编程的一种方案，ES6的一个新标准，目前大多数浏览器已经支持，而且还有一些第三方库也实现了该功能。Promise对象有两个特点，一是对象的状态不受外界影响，二是一旦状态改变，就不会再变，任何时候都可以得到这个结果。我们先来看一下Promise的简单用法…<br><a id="more"></a><br>Promise是异步编程的一种方案，ES6的一个新标准，目前大多数浏览器已经支持，而且还有一些第三方库也实现了该功能。Promise对象有两个特点，一是对象的状态不受外界影响，二是一旦状态改变，就不会再变，任何时候都可以得到这个结果。我们先来看一下Promise的简单用法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 事务触发</span></span><br><span class="line">    resovle(xxx);</span><br><span class="line">    ...</span><br><span class="line">    reject(xxx);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 满足</span></span><br><span class="line">  ...</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拒绝</span></span><br><span class="line">  ...</span><br><span class="line">&#125;).then().then()...</span><br></pre></td></tr></table></figure></p><p>大致的情况是这样，Promise的构造函数接收一个函数作为参数，这个函数的参数是两个promise内部定义好的两个函数，resolve和reject。当满足一定的条件时，可以调用这两个函数中的一个，触发事务。Promise的状态会从pendding变为fulfilled或者rejected，然后调用.then()方法注册的回调函数，实现异步编程。.then()函数的返回值仍为Promise对象，因此可以进行链式调用，避免回调地狱的发生。大致流程图如下：<br><img src="http://ofn881vu0.bkt.clouddn.com/promise.png" alt="img"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>首先我们整理出promise的三种状态机制，pendding（准备），fulfilled(即resolved，成功)，rejected（失败）。然后定义一个数组hendlers来存放.then()里的回调函数。定义一个value来存储异步操作的数据（核心）。那么大致Promise看起来是这样的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PENDING = <span class="number">0</span>;  <span class="comment">// 进行中  </span></span><br><span class="line"><span class="keyword">var</span> FULFILLED = <span class="number">1</span>; <span class="comment">// 成功  </span></span><br><span class="line"><span class="keyword">var</span> REJECTED = <span class="number">2</span>;  <span class="comment">// 失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 存储PENDING, FULFILLED或者REJECTED的状态</span></span><br><span class="line">  <span class="keyword">var</span> state = PENDING;</span><br><span class="line">  <span class="comment">// 存储成功或失败的结果值</span></span><br><span class="line">  <span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 存储成功或失败的处理程序，通过调用`.then`或者`.done`方法</span></span><br><span class="line">  <span class="keyword">var</span> handlers = [];</span><br><span class="line">  <span class="comment">// 成功状态变化</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    state = FULFILLED;</span><br><span class="line">    value = result;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 失败状态变化</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    state = REJECTED;</span><br><span class="line">    value = error;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后我们来看Promise对象中的resolve方法，他的作用是代表异步操作成功，将数据’穿透’出去。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// ... some code</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="comment">/* 异步操作成功 */</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这里注意，这个value分两种情况，一种是普通值，那么就继续执行，如果是promise对象，则注意要等子promise对象先执行完毕返回，才能继续执行。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如果是一个promise对象</span></span><br><span class="line">        <span class="keyword">if</span> (result <span class="keyword">instanceof</span> <span class="built_in">Promise</span>) &#123;</span><br><span class="line">          doResolve(result.then.bind(result), resolve, reject);</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 修改状态，传递结果到下一个事务</span></span><br><span class="line">        fulfill(result);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        reject(e);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 继续执行promise处理</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">doResolve</span>(<span class="params">fn, onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">     <span class="keyword">var</span> done = <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         fn(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">if</span> (done) <span class="keyword">return</span>;</span><br><span class="line">             done = <span class="literal">true</span>;</span><br><span class="line">             onFulfilled(value);</span><br><span class="line">         &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">             <span class="keyword">if</span> (done) <span class="keyword">return</span>;</span><br><span class="line">             done = <span class="literal">true</span>;</span><br><span class="line">             onRejected(reason);</span><br><span class="line">         &#125;);</span><br><span class="line">     &#125; <span class="keyword">catch</span>(ex) &#123;</span><br><span class="line">         <span class="keyword">if</span> (done) <span class="keyword">return</span>;</span><br><span class="line">         done = <span class="literal">true</span>;</span><br><span class="line">         onRejected(ex);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这个fn就是构造promise时传递进来的函数，因此我们可以这样暴露出接口：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params">fn</span>) </span>&#123;  </span><br><span class="line">    ...</span><br><span class="line">    doResolve(fn, resolve, reject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>目前，我们这一整套机制已经走到了流程图的前一半部分，触发事务，改变状态。接下来就是实现then()函数，我们先来看看怎么简单的实现，即不返回promise对象，一调用就结束整个流程的done()，结合之前所实现的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> PENDING = <span class="number">0</span>;  <span class="comment">// 进行中  </span></span><br><span class="line"><span class="keyword">var</span> FULFILLED = <span class="number">1</span>; <span class="comment">// 成功  </span></span><br><span class="line"><span class="keyword">var</span> REJECTED = <span class="number">2</span>;  <span class="comment">// 失败</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Promise</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 存储PENDING, FULFILLED或者REJECTED的状态</span></span><br><span class="line">  <span class="keyword">var</span> state = PENDING;</span><br><span class="line">  <span class="comment">// 存储成功或失败的结果值</span></span><br><span class="line">  <span class="keyword">var</span> value = <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">// 存储成功或失败的处理程序，通过调用`.then`或者`.done`方法</span></span><br><span class="line">  <span class="keyword">var</span> handlers = [];</span><br><span class="line">  <span class="comment">// 成功状态变化</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fulfill</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    state = FULFILLED;</span><br><span class="line">    value = result;</span><br><span class="line">    handlers.forEach(handle);</span><br><span class="line">    handlers = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 失败状态变化</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">reject</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">    state = REJECTED;</span><br><span class="line">    value = error;</span><br><span class="line">    handlers.forEach(handle);</span><br><span class="line">    handlers = <span class="literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">result</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> then = getThen(result);</span><br><span class="line">      <span class="keyword">if</span> (then) &#123;</span><br><span class="line">        doResolve(then.bind(result), resolve, reject)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      fulfill(result);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">      reject(e);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 不同状态，进行不同的处理</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">handle</span>(<span class="params">handler</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (state === PENDING) &#123;</span><br><span class="line">      handlers.push(handler);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (state === FULFILLED &amp;&amp;</span><br><span class="line">        <span class="keyword">typeof</span> handler.onFulfilled === <span class="string">'function'</span>) &#123;</span><br><span class="line">        handler.onFulfilled(value);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (state === REJECTED &amp;&amp;</span><br><span class="line">        <span class="keyword">typeof</span> handler.onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">        handler.onRejected(value);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">this</span>.done = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 保证异步</span></span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      handle(&#123;</span><br><span class="line">        onFulfilled: onFulfilled,</span><br><span class="line">        onRejected: onRejected</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">0</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  doResolve(fn, resolve, reject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我们结合promise的调用来看<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;  </span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">// 传入数据，改变state</span></span><br><span class="line">    resovle(xxx);</span><br><span class="line">    ...</span><br><span class="line">    reject(xxx);</span><br><span class="line">&#125;);</span><br><span class="line">p.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// 满足</span></span><br><span class="line">  ...</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params">reason</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 拒绝</span></span><br><span class="line">  ...</span><br><span class="line">&#125;).then().then()...</span><br></pre></td></tr></table></figure></p><p>初始化Promise以后就会触发resovle和reject函数并且把异步的参数传入，此时Promise内部发生的改变是：</p><blockquote><ul><li>初始化Promise以后就会触发resovle和reject函数并且把异步的参数传入，此时Promise内部发生的改变是：</li><li>判断此时handle中是否有需要等待执行的回调函数，若果有则将异步参数传入并且执行回调函数。</li></ul></blockquote><p>这里说明一下handlers的数据结构，它是一个数组，每个元素是一个对象，里面有两个属性，onFulfilled对应的值是成功是需要调用的回调函数，onReject对应的值是失败后需要调用的回调函数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">handlers = [&#123;</span><br><span class="line">   onFulfilled : <span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">   onRejected: <span class="function"><span class="keyword">function</span> <span class="title">xxxx</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">&#125;,&#123;</span><br><span class="line">   onFulfilled : <span class="function"><span class="keyword">function</span> <span class="title">xxx</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">   onRejected: <span class="function"><span class="keyword">function</span> <span class="title">xxxx</span>(<span class="params"></span>)</span>&#123;&#125; </span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure></p><p>那么这些回调函数是怎么穿进去的呢，很明显，就是在.then()函数里面，他接受两个参数，第一个onFulfilled类型，第二个是onRejected类型。我们已经实现了不返回promise的done方法，那么实现then就比较容易了，只要新建一个promise对象返回出去就可以了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.then = <span class="function"><span class="keyword">function</span> (<span class="params">onFulfilled, onRejected</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.done(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> onFulfilled === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">// onFulfilled方法要有返回值！</span></span><br><span class="line">          <span class="keyword">return</span> resolve(onFulfilled(result));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(ex);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resolve(result);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="keyword">typeof</span> onRejected === <span class="string">'function'</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> resolve(onRejected(error));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ex) &#123;</span><br><span class="line">          <span class="keyword">return</span> reject(ex);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(error);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实大致的思路就是创建promise对象，使用then方法将回调函数先注入handlers，等到异步调用结束，执行resolve或者reject函数是改变state，触发handlers中之前注入的函数。最后再返回一个promise对象。通过本例我们可以看到js中函数是特等公民，可以作为参数，可以作为返回值，甚至是键值对。<br><a href="http://ofn881vu0.bkt.clouddn.com/promise.js" target="_blank" rel="noopener">完整代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Promise是异步编程的一种方案，ES6的一个新标准，目前大多数浏览器已经支持，而且还有一些第三方库也实现了该功能。Promise对象有两个特点，一是对象的状态不受外界影响，二是一旦状态改变，就不会再变，任何时候都可以得到这个结果。我们先来看一下Promise的简单用法…&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>小谈Safari无痕模式</title>
    <link href="http://yoursite.com/2018/06/27/%E5%B0%8F%E8%B0%88Safari%E6%97%A0%E7%97%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/06/27/小谈Safari无痕模式/</id>
    <published>2018-06-27T06:54:54.000Z</published>
    <updated>2018-06-27T08:21:38.018Z</updated>
    
    <content type="html"><![CDATA[<p>开发H5 webapp时经常需要使用本地存储，与最多能存4k的cookie相比，localStorage和sessionStorage的优势明显。因此在公司的一个项目中我是用了localStorage来替代cookie。但是却不知道缺隐藏着一些未知因素。事情是这样的，客服说有一个用户怎么都登录不了，明明用户名密码是正确的，但就是登录不了，很是奇怪。经过一番的折腾才明白，原来用户使用的Safari的无痕模式浏览，localStorage对象仍然存在,但是localStorage的setItem对象会报出异常QuotaExceededError，getItem和removeItem则直接忽略（undefined）。这相当于你有一台手机但是却打不了电话…</p><a id="more"></a><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>知道了原因以后就好解决了，当时的思路是两个：</p><blockquote><ul><li>每当遇到存储操作时判断是否是无痕模式，是无痕模式就使用cookie，不是就使用sessionStorage</li><li>整套换掉使用cookie</li></ul></blockquote><p>个人倾向于第二种的，但是当时大佬说用第一种。那么说干就干，由于我们使用的是zepto.js而且zepto.cookie.js只提供了set的方法，所以还需要自己封装cookie操作。首先我们来看怎么判断是否为无痕模式，使用try/catch就可以判断了，如果报出异常就是无痕模式，使用cookie，反之就使用localStorage。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断是否为无痕模式</span></span><br><span class="line">getType: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        localStorage.setItem(<span class="string">'test'</span>, <span class="string">'testValue'</span>);</span><br><span class="line">        localStorage.removeItem(<span class="string">'test'</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'localStorage'</span>;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'cookie'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>然后我们定义一个storage对象：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> storage = &#123;</span><br><span class="line">    getType: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            localStorage.setItem(<span class="string">'test'</span>, <span class="string">'testValue'</span>);</span><br><span class="line">            localStorage.removeItem(<span class="string">'test'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'localStorage'</span>;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (error)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">'cookie'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, </span><br><span class="line">    setItem: <span class="function"><span class="keyword">function</span>(<span class="params">item, itemValue</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getType == <span class="string">'cookie'</span>)&#123;</span><br><span class="line">            <span class="comment">//使用cookie的setItem</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//使用localStorage的setItem</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    getItem: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getType == <span class="string">'cookie'</span>)&#123;</span><br><span class="line">            <span class="comment">//使用cookie的getItem</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//使用localStorage的getItem</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    removeItem: <span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getType == <span class="string">'cookie'</span>)&#123;</span><br><span class="line">            <span class="comment">//使用cookie的removeItem</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//使用localStorage的removeItem</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    clear: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span>.getType == <span class="string">'cookie'</span>)&#123;</span><br><span class="line">            <span class="comment">//使用cookie的clear</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//使用localStorage的clear</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看来以后在移动端使用localStorage和sessionStorage还是要小心啊，注意Safari这一个坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开发H5 webapp时经常需要使用本地存储，与最多能存4k的cookie相比，localStorage和sessionStorage的优势明显。因此在公司的一个项目中我是用了localStorage来替代cookie。但是却不知道缺隐藏着一些未知因素。事情是这样的，客服说有一个用户怎么都登录不了，明明用户名密码是正确的，但就是登录不了，很是奇怪。经过一番的折腾才明白，原来用户使用的Safari的无痕模式浏览，localStorage对象仍然存在,但是localStorage的setItem对象会报出异常QuotaExceededError，getItem和removeItem则直接忽略（undefined）。这相当于你有一台手机但是却打不了电话…&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用hexo+github快速建站</title>
    <link href="http://yoursite.com/2018/01/07/hexo%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%99/"/>
    <id>http://yoursite.com/2018/01/07/hexo快速建站/</id>
    <published>2018-01-07T02:04:55.000Z</published>
    <updated>2018-08-27T09:03:33.850Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前就有搭建博客的想法，之前野心比较大。从设计，前端，后端都自己来，花了大概半个多月（上班空闲时间）搭建成了一个vue+node+mongodb的博客。并且买了一台阿里云的服务器，部署了上去（安装部署花了很多时间）。后来由于阿里云欠费，把我的mongodb的数据全清了，所以就想着不用了。有了之前的经验，自己就不想再重头开始，费时费力而且不怎么好看，就把目标瞄准了快速搭建博客的框架hexo、jekyll、wordpress等工具。个人尝试了hexo体验非常好，敲几行命令花个10分钟就能部署到github.io上了，而且不用买服务器，不花钱！还有许多模板样式供你挑选，非常的方便。本站就是使用hexo搭建的。记录下步骤和常见的错误给大家参考…<br><a id="more"></a></p><p>很久之前就有搭建博客的想法，之前野心比较大。从设计，前端，后端都自己来，花了大概半个多月（上班空闲时间）搭建成了一个vue+node+mongodb的博客。并且买了一台阿里云的服务器，部署了上去（安装部署花了很多时间）。后来由于阿里云欠费，把我的mongodb的数据全清了，所以就想着不用了。有了之前的经验，自己就不想再重头开始，费时费力而且不怎么好看，就把目标瞄准了快速搭建博客的框架hexo、jekyll、wordpress等工具。个人尝试了hexo体验非常好，敲几行命令花个10分钟就能部署到github.io上了，而且不用买服务器，不花钱！还有许多模板样式供你挑选，非常的方便。本站就是使用hexo搭建的。记录下步骤和常见的错误给大家参考…</p><h2 id="准备环境"><a href="#准备环境" class="headerlink" title="准备环境"></a>准备环境</h2><p>首先你需要以下的环境和工具，具体安装配置就不再赘述，网上很多。</p><blockquote><ul><li>github账号</li><li>git客户端</li><li>nodejs</li></ul></blockquote><h2 id="安装配置hexo"><a href="#安装配置hexo" class="headerlink" title="安装配置hexo"></a>安装配置hexo</h2><p>按照hexo官网提示,首先安装hexo。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure></p><p>新建完成后，指定文件夹的目录如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── <span class="built_in">source</span></span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure></p><p>然后简单介绍一下，网站的配置信息在_config.yml中，您可以在此配置大部分的参数。package.json是其应用程序的信息，依赖了那些东西。scaffolds是模版文件夹。当新建文章时，Hexo会根据scaffold来建立文件。source资源文件夹是存放用户资源的地方。themes是主题文件夹。Hexo会根据主题来生成静态页面。</p><h2 id="本地运行发布文章"><a href="#本地运行发布文章" class="headerlink" title="本地运行发布文章"></a>本地运行发布文章</h2><p>然后我们执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><p>打开浏览器输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://localhost:4000/</span><br></pre></td></tr></table></figure></p><p>就能看到搭建的博客了<br><img src="http://ojadcva8s.bkt.clouddn.com/bl1.png" alt="img"><br>这篇文章是Hexo默认生成的，那么怎么自己发布一篇文章呢？其实这篇默认的文章就已经讲了。首先执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"blog"</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;floder&gt;/<span class="built_in">source</span>/_posts</span><br></pre></td></tr></table></figure></p><p>在_posts文件夹下可以看到生成的blog.md，然后使用markdown进行写作。再次执行上面的步骤，就可以看到文章啦。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></p><h2 id="部署到github"><a href="#部署到github" class="headerlink" title="部署到github"></a>部署到github</h2><p>之前我们都是在本地进行测试，那么怎么部署到线上呢？其实也非常简单，github创建一个仓库名为yourname.github.io，其中yourname为你的用户名。打开_config.yml文件，下面是该文件的默认参数信息：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Hexo Configuration</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/configuration.html</span></span><br><span class="line"><span class="comment">## Source: https://github.com/hexojs/hexo/</span></span><br><span class="line"><span class="comment"># Site</span></span><br><span class="line">title: Hexo</span><br><span class="line">subtitle:</span><br><span class="line">description:</span><br><span class="line">author: John Doe</span><br><span class="line">language:</span><br><span class="line">timezone:</span><br><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://yoursite.com</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line"><span class="comment"># Directory</span></span><br><span class="line">source_dir: <span class="built_in">source</span></span><br><span class="line">public_dir: public</span><br><span class="line">tag_dir: tags</span><br><span class="line">archive_dir: archives</span><br><span class="line">category_dir: categories</span><br><span class="line">code_dir: downloads/code</span><br><span class="line">i18n_dir: :lang</span><br><span class="line">skip_render:</span><br><span class="line"><span class="comment"># Writing</span></span><br><span class="line">new_post_name: :title.md <span class="comment"># File name of new posts</span></span><br><span class="line">default_layout: post</span><br><span class="line">titlecase: <span class="literal">false</span> <span class="comment"># Transform title into titlecase</span></span><br><span class="line">external_link: <span class="literal">true</span> <span class="comment"># Open external links in new tab</span></span><br><span class="line">filename_case: 0</span><br><span class="line">render_drafts: <span class="literal">false</span></span><br><span class="line">post_asset_folder: <span class="literal">false</span></span><br><span class="line">relative_link: <span class="literal">false</span></span><br><span class="line">future: <span class="literal">true</span></span><br><span class="line">highlight:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  line_number: <span class="literal">true</span></span><br><span class="line">  auto_detect: <span class="literal">false</span></span><br><span class="line">  tab_replace:</span><br><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">tag_map:</span><br><span class="line"><span class="comment"># Date / Time format</span></span><br><span class="line"><span class="comment">## Hexo uses Moment.js to parse and display date</span></span><br><span class="line"><span class="comment">## You can customize the date format as defined in</span></span><br><span class="line"><span class="comment">## http://momentjs.com/docs/#/displaying/format/</span></span><br><span class="line">date_format: YYYY-MM-DD</span><br><span class="line">time_format: HH:mm:ss</span><br><span class="line"><span class="comment"># Pagination</span></span><br><span class="line"><span class="comment">## Set per_page to 0 to disable pagination</span></span><br><span class="line">per_page: 10</span><br><span class="line">pagination_dir: page</span><br><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line">theme: landscape</span><br><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>:</span><br></pre></td></tr></table></figure></p><p>修改其中的url为<a href="https://yourname.github.io" target="_blank" rel="noopener">https://yourname.github.io</a> ，和之前一样yourname为你的用户名。然后修改deploy<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/PecoKael/PecoKael.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><p>其中repo为你的仓库地址。然后执行：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></p><p>就可以在线上看到你的博客了，例如我的地址是<a href="https://pecokael.github.io" target="_blank" rel="noopener">https://pecokael.github.io</a> 。不用买服务器，不用复杂的配置，很方便对不对！</p><h2 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h2><p>本地执行<code>$ hexo server</code>然后访问网站的时候网页显示不出来。这是因为你的电脑安装了福昕阅读，端口被它占用了。执行<code>$ hexo server -p 5000</code>使用其他端口就可以了。<br>执行<code>$ hexo deploy</code>时报错<code>Deploy not found: git</code>。执行<code>npm install hexo-deployer-git</code>安装一下插件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久之前就有搭建博客的想法，之前野心比较大。从设计，前端，后端都自己来，花了大概半个多月（上班空闲时间）搭建成了一个vue+node+mongodb的博客。并且买了一台阿里云的服务器，部署了上去（安装部署花了很多时间）。后来由于阿里云欠费，把我的mongodb的数据全清了，所以就想着不用了。有了之前的经验，自己就不想再重头开始，费时费力而且不怎么好看，就把目标瞄准了快速搭建博客的框架hexo、jekyll、wordpress等工具。个人尝试了hexo体验非常好，敲几行命令花个10分钟就能部署到github.io上了，而且不用买服务器，不花钱！还有许多模板样式供你挑选，非常的方便。本站就是使用hexo搭建的。记录下步骤和常见的错误给大家参考…&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
